import axios from 'axios';
import qs from 'qs';
import $config from '@/config';
import { Message } from 'element-ui';
import { getToken } from '@/axios/util';

let baseUrl = '';
switch (process.env.NODE_ENV) {
    case 'development':
        baseUrl = $config.apiUrl.dev;
        break;
    case 'production':
        baseUrl = $config.apiUrl.pro;
        break;
    case 'testDev':
        baseUrl = $config.apiUrl.testDev;
        break;
}

/**
 * 创建axios实例
 * @type {AxiosInstance}
 */
const service = axios.create({
    // api的base_url
    baseURL: baseUrl,
    // 设置请求超时时间30s
    timeout: 30000,
});

service.apiUrl = baseUrl;

/**
 * 请求参数处理
 */
service.interceptors.request.use((config) => {
    // 参数签名处理
    if (config.method === 'get') {
        config.params = { ...config.params };
    } else if (config.method === 'post' && !config.file) {
        config.data = qs.stringify({ ...config.data });
    }
    // config.method === 'get'
    //   ? config.params = {...config.params} : config.data = qs.stringify({...config.data})

    const token = getToken();
    if (token) {
        config.headers['Authorization'] = 'Bearer ' + token;
    }
    // config.headers['Content-Type'] = 'application/json'

    if (config.file) {
        config.headers['Content-Type'] = 'multipart/form-data';
    }
    return config;
});
/**
 * 响应结果处理
 */
service.interceptors.response.use(
    (response) => {
        response.data.data = response.data.result;
        if (response.data.code === 0) {
            // 服务端定义的响应code码为0时请求成功
            // 使用Promise.resolve 正常响应
            return Promise.resolve(response.data);
        } else {
            // 使用Promise.reject 响应
            Message.error({ content: response.data.message });
            return Promise.reject(response.result);
        }
    },
    (error) => {
        let message = '';
        // response.data.data = response.data.result
        if (error && error.response) {
            switch (error.response.status) {
                case 401:
                    location.reload();
                    return;
                case 403:
                    message = error.response.data.path + ',' + error.response.data.message;
                    break;
                case 429:
                    message = '访问太过频繁，请稍后再试!';
                    break;
                default:
                    message = error.response.data.message ? error.response.data.message : '服务器错误';
                    break;
            }
            Message.error({ content: message });
            // 请求错误处理
            return Promise.reject(error);
        } else {
            message = '连接服务器失败';
            Message.error({ content: message });
            return Promise.reject(error);
        }
    }
);

export default service;
