<template>
  <div class="addTaskContainer">
    <div class="stepWrapper">
      <div class="stepBox">
        <div style="width:500px">
          <el-steps :active="stepAvtive" simple finish-status="success" process-status="wait">
            <el-step :key="index" v-for="(item, index) in stepList" :title="item.name"></el-step>
          </el-steps>
        </div>
        <div class="timeBox">
          <div class="stopTimeImg">
            <img src="../../../assets/stopWatch.png" alt />
          </div>
          <div class="bzzzik">
            Êó∂Èó¥Ââ©‰Ωô
            <span class="fontX">(Êó∂ÂàÜÁßí)Ôºö</span>
          </div>
          <div class="numTime">{{hour}}</div>:
          <div class="numTime">{{minute}}</div>:
          <div class="numTime">{{second}}</div>
        </div>
      </div>
    </div>
    <div class="uploadGrid">
      <div class="upPdfWrapper">
        <PdfCom></PdfCom>
      </div>
      <!-- ‰ΩúÁ≠îÈ°µÈù¢ -->
      <div class="box">
        <div class="setAnswerContainer test-1">
          <p class="setTitle">Á≠îÈ¢òÂç°</p>
          <!-- È¢òÂûãÈÅçÂéÜ -->
          <div class="subjectList" v-for="(item,index) in subjectList" :key="index">
            <div class="topInfo">
              <div class="subTitle">
                <p>{{ item.name }}</p>
                <div class="chooseUploadType" v-if="item.uploadType || item.uploadType == 0">
                  <el-radio-group v-model="item.uploadType">
                    <el-radio
                      v-for="(typeItem,typeIndex) in uploadTypeList"
                      :key="typeIndex"
                      :label="typeItem.val"
                    >{{ typeItem.name }}</el-radio>
                  </el-radio-group>
                  <el-tooltip
                    class="item"
                    effect="dark"
                    content="üì± ÊâãÊú∫Êâ´Êèè‰∫åÁª¥Á†Å ÊãçÁÖß‰∏ä‰º†Á≠îÈ¢ò"
                    placement="top"
                  >
                    <img src="@/assets/scanningQrcode.png" />
                  </el-tooltip>
                </div>
              </div>
              <ul class="subInfo">
                <!-- È¢òÂûã‰∏≠ÁöÑÊüê‰∏™È¢òÁöÑÈÅçÂéÜ -->
                <li :key="i" v-for="(el,i) in item.list" class="subGrid">
                  <div class="answerItem">
                    <p class="sortIndex">{{ i + 1 }}.</p>

                    <!-- ÂçïÈÄâ / Â§öÈÄâÁöÑÈÄâÈ°πÈÅçÂéÜ -->
                    <div
                      class="subTypeGrid"
                      v-if="Number(item.type) === 1 || Number(item.type) === 2"
                    >
                      <el-button
                        @click="setOptionActive(item.type, index, i, optionIndex)"
                        class="optionBtn"
                        :key="optionIndex"
                        v-for="(optionRes, optionIndex) in el.optionList"
                        :type="optionRes.isActive ? 'warning' : ''"
                        size="small"
                        round
                      >{{ optionRes.name }}</el-button>
                    </div>

                    <!-- Âà§Êñ≠È¢òÈÄâÈ°πÈÅçÂéÜ -->
                    <div class="subTypeGrid" v-else-if="Number(item.type) === 3">
                      <el-button
                        @click="setJudgeActive(index, i, optionIndex)"
                        class="optionBtn"
                        :key="optionIndex"
                        v-for="(optionRes, optionIndex) in el.optionList"
                        :type="optionRes.isActive ? 'warning' : ''"
                        size="small"
                        round
                      >{{ optionRes.name }}</el-button>
                    </div>
                    <!-- ‰∏ªËßÇÈ¢òUI -->
                    <div class="subTypeGrid" v-else>
                      <div class="imgList">
                        <upload-img
                          :imageUrl="item.answerUrl"
                          :single="false"
                          refDom="clearErrorone"
                          word="communityLogo"
                          @addSignPic="updateIcon"
                          :disabled="isUpimg"
                        ></upload-img>
                      </div>
                    </div>
                  </div>
                </li>
              </ul>
            </div>
          </div>
        </div>
        <div class="operationBox">
          <button class="btn1" @click="saveWor">‰øùÂ≠ò</button>
          <button class="btn2" @click="submitWor">Êèê‰∫§</button>
        </div>
      </div>
      <!-- Êèê‰∫§È°µÈù¢ -->
    </div>
  </div>
</template>

<script>
import PdfCom from "_c/pdfCom";
import uploadImg from "@/components/uploadImg";

export default {
  name: "answerSheet",
  components: {
    PdfCom,
    uploadImg
  },
  created() {
    this.countTime();
    this.resultArr.forEach(res => {
      // ÂÖàÁúãÂ≠ò‰∏çÂ≠òÂú®ËøôÁ±ªÈ¢òÂûã
      let isLive = this.subjectList.findIndex(v => v.type === res.type);

      if (Number(res.type) === 1) {
        // res = this.setOption(res)
      }

      if (isLive > -1) {
        // Â≠òÂú®Â∞±Áõ¥Êé•push
        this.subjectList[isLive].list.push(res);
      } else {
        // ‰∏çÂ≠òÂú®Â∞±ÂÖàÂàõÂª∫
        this.subjectList.push({
          type: res.type,
          name: res.name,
          list: [res]
        });
        isLive = this.subjectList.length - 1;
      }

      // ÁªÑË£Ö + Ê∑ªÂä†ËÆøÈóÆÂô®Â±ûÊÄß
      if (Number(res.type) === 1 || Number(res.type) === 2) {
        this.setChooseSubAccessorAttribute(isLive, res);
      } else if (Number(res.type) === 3) {
        this.setJudgeSubAccessorAttribute(isLive, res);
      } else {
        // ÂÖ∂‰ΩôÁ±ªÂûãÈÉΩÂøÖÈ°ªÈÖçÁΩÆ‰∏Ä‰∏™ÂºÄÂÖ≥ ‰ª£Ë°®ÊòØÂê¶ÊòØÊï¥‰Ωì‰∏ä‰º†ËøòÊòØÂàÜ‰Ωì‰∏ä‰º†ÔºåÈªòËÆ§ÊòØÂàÜ‰Ωì‰∏ä‰º†
        this.setSubjectiveAccessorAttribute(isLive, res);
      }
    });
  },
  methods: {
    // ÂÄíËÆ°Êó∂
    countTime() {
      var date = new Date();
      var now = date.getTime();
      var endDate = new Date("2020-7-05 00:00:00"); //ËÆæÁΩÆÊà™Ê≠¢Êó∂Èó¥
      var end = endDate.getTime();
      var leftTime = end - now; //Êó∂Èó¥Â∑Æ
      if (leftTime >= 0) {
        this.hour = Math.floor(leftTime / 1000 / 60 / 60);
        this.minute = Math.floor((leftTime / 1000 / 60) % 60);
        this.second = Math.floor((leftTime / 1000) % 60);
        if (this.second < 10) {
          this.second = "0" + this.second;
        }
        if (this.minute < 10) {
          this.minute = "0" + this.minute;
        }
        if (this.hour < 10) {
          this.hour = "0" + this.hour;
        }
      } else {
        console.log("Â∑≤Êà™Ê≠¢");
      }
      setTimeout(this.countTime, 50);
    },
    // ËÆæÁΩÆ‰∏ªËßÇÈ¢òÁõÆÁöÑËÆøÈóÆÂô®Â±ûÊÄß
    setSubjectiveAccessorAttribute(totalIndex) {
      // Ê∑ªÂä†ÊòØÂê¶Â±ïÁ§∫ÂçïÈÄâÊ°ÜÁªÑÔºàÈÄâÊã©ÊòØÂàÜÈ¢òËøòÊòØÊï¥‰Ωì‰∏ä‰º†ÔºâÁöÑÂ±ûÊÄß
      this.$set(this.subjectList[totalIndex], "uploadType", 0);
      // Ê∑ªÂä†‰∏ä‰º†ÂõæÁâáÁöÑÂ±ûÊÄßÔºàÂõæÁâáÊúÄÂ§ö‰∏âÂº†ÔºåÊöÇÂÆöÁî®StringÔºåËΩ¨Êç¢‰∏∫Êï∞ÁªÑÂ±ïÁ§∫Ôºâ
      this.$set(
        this.subjectList[totalIndex].list[
          this.subjectList[totalIndex].list.length - 1
        ],
        "answerUrl",
        ""
      );
    },
    // ËÆæÁΩÆÂà§Êñ≠È¢òÁõÆÁöÑËÆøÈóÆÂô®Â±ûÊÄß
    setJudgeSubAccessorAttribute(totalIndex) {
      this.$set(
        this.subjectList[totalIndex].list[
          this.subjectList[totalIndex].list.length - 1
        ],
        "optionList",
        []
      );
      this.judgeSubList.forEach((el, index) => {
        this.$set(
          this.subjectList[totalIndex].list[
            this.subjectList[totalIndex].list.length - 1
          ].optionList,
          index,
          { ...el }
        );
      });
    },
    // ËÆæÁΩÆÈÄâÊã©È¢òÁõÆÁöÑËÆøÈóÆÂô®Â±ûÊÄß
    setChooseSubAccessorAttribute(totalIndex, res) {
      let arr = res.value.split(",");
      this.$set(
        this.subjectList[totalIndex].list[
          this.subjectList[totalIndex].list.length - 1
        ],
        "optionList",
        []
      );
      (arr || []).forEach((el, index) => {
        this.$set(
          this.subjectList[totalIndex].list[
            this.subjectList[totalIndex].list.length - 1
          ].optionList,
          index,
          {
            name: el,
            isActive: false
          }
        );
      });
    },
    setJudgeActive(index, i, optionIndex) {
      this.subjectList[index].list[i].optionList.map(v => {
        v.isActive = false;
      });
      this.subjectList[index].list[i].optionList[optionIndex].isActive = true;
    },
    setOptionActive(type, index, i, optionIndex) {
      if (Number(type) === 1) {
        this.subjectList[index].list[i].optionList.map(v => {
          v.isActive = false;
        });
      } else {
        let isChoosed = this.subjectList[index].list[i].optionList.findIndex(
          v => v.isActive
        );
        if (isChoosed === optionIndex) {
          this.subjectList[index].list[i].optionList[
            optionIndex
          ].isActive = false;
          return;
        }
      }
      this.subjectList[index].list[i].optionList[optionIndex].isActive = true;
    },
    // ‰øùÂ≠ò
    saveWor() {
      // ËøîÂõû‰Ωú‰∏öÂàóË°®
    },
    // Êèê‰∫§
    submitWor() {
      this.stepAvtive = 2;
    }
  },
  watch: {
    stepAvtive(val) {
      this.$router.replace({
        query: {
          type: val
        }
      });
    }
  },
  data() {
    return {
      stepAvtive: 1,
      hour: "",
      minute: "",
      second: "",
      stepList: [
        {
          name: "‰Ωú‰∏ö‰ΩúÁ≠î"
        },
        {
          name: "‰Ωú‰∏öÊèê‰∫§"
        }
      ],
      activeColor: "#ED6D00",
      subjectList: [],
      uploadTypeList: [
        {
          name: "ÂàÜÈ¢ò‰∏ä‰º†",
          val: 0
        },
        {
          name: "Êï¥‰Ωì‰∏ä‰º†",
          val: 1
        }
      ],
      judgeSubList: [
        {
          name: "Ê≠£Á°Æ",
          val: 1,
          isActive: false
        },
        {
          name: "ÈîôËØØ",
          val: 0,
          isActive: false
        }
      ],
      resultArr: [
        {
          type: 1,
          name: "ÂçïÈÄâÈ¢ò",
          value: "A,B,C,D",
          sort: 1
        },
        {
          type: 1,
          name: "ÂçïÈÄâÈ¢ò",
          value: "A,B,C,D",
          sort: 2
        },
        {
          type: 1,
          name: "ÂçïÈÄâÈ¢ò",
          value: "A,B,C,D",
          sort: 3
        },
        {
          type: 1,
          name: "ÂçïÈÄâÈ¢ò",
          value: "A,B,C,D",
          sort: 4
        },
        {
          type: 2,
          name: "Â§öÈÄâ",
          value: "A,B,C,D,E",
          sort: 5
        },
        {
          type: 2,
          name: "Â§öÈÄâ",
          value: "A,B,C,D,E",
          sort: 6
        },
        {
          type: 2,
          name: "Â§öÈÄâ",
          value: "A,B,C,D,E",
          sort: 7
        },
        {
          type: 3,
          name: "Âà§Êñ≠",
          sort: 8
        },
        {
          type: 3,
          name: "Âà§Êñ≠",
          sort: 9
        },
        {
          type: 3,
          name: "Âà§Êñ≠",
          sort: 10
        },
        {
          type: 4,
          name: "Â°´Á©∫",
          sort: 11
        },
        {
          type: 4,
          name: "Â°´Á©∫",
          sort: 12
        },
        {
          type: 4,
          name: "Â°´Á©∫",
          sort: 13
        }
      ]
    };
  }
};
</script>

<style lang="scss">
.addTaskContainer {
  width: 100%;
  height: 100%;
  max-height: 100%;
  display: flex;
  flex-direction: column;
  .uploadGrid {
    height: calc(100% - 46px);
    max-height: calc(100% - 46px);
    display: flex;
    flex: 1;
    padding-bottom: 10px;
    box-sizing: border-box;
    overflow: hidden;
    .formWrapper {
      display: flex;
      flex-direction: column;
      justify-content: space-between;
      .bottomGrid {
        display: flex;
        justify-content: center;
      }
    }
    .upPdfWrapper {
      height: 100%;
      max-height: 100%;
      overflow: auto;
      max-width: 720px;
      width: 720px;
      display: flex;
      justify-content: center;
      align-items: center;
      border: 1px dashed #979797;
      flex: 1;
      margin-right: 20px;

      .noPdf {
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
        p {
          margin-top: 15px;
          font-size: 14px;
          font-weight: 400;
          color: rgba(0, 0, 0, 0.65);
        }
      }
    }
  }
  .stepWrapper {
    margin-bottom: 20px;
  }
  .stepBox {
    display: flex;
    .timeBox {
      display: flex;
      justify-content: flex-end;
      height: 46px;
      align-items: center;
      // line-height: 46px;
      width: 100%;
      background-color: #f5f7fa;
      .stopTimeImg {
        height: 18px;
        width: 18px;
        margin-right: 5px;
      }
      .bzzzik {
        font-size: 18px;
        font-family: PingFangSC-Medium, PingFang SC;
        font-weight: 500;
        .fontX {
          font-size: 14px;
        }
      }
      .numTime {
        width: 32px;
        height: 32px;
        margin: 10px;
        text-align: center;
        line-height: 32px;
        background: #ffffff;
        font-size: 18px;
        font-weight: 500;
        color: rgba(255, 69, 66, 1);
      }
    }
  }
}
.box {
  background: #fafafa;
  height: 100%;
  width: 450px;
  .setAnswerContainer {
    background: #fafafa;
    padding: 16px;
    padding-bottom: 0px;
    flex: 1;
    height: 88%;
    max-height: 88%;
    overflow: auto;
    box-sizing: border-box;
    .setTitle {
      font-size: 18px;
      font-weight: 500;
      color: rgba(9, 34, 56, 1);
    }
    .subInfo {
      background: #fff;
      padding-top: 16px;
      .subGrid {
        list-style: none;
        padding-bottom: 16px;
        .sortIndex {
          font-size: 14px;
          font-weight: 500;
          color: rgba(9, 34, 56, 1);
        }
        .answerItem {
          display: flex;
          padding-left: 20px;
          align-items: center;
          .subTypeGrid {
            display: flex;
            align-items: center;
          }
          .optionBtn {
            margin-left: 20px;
            width: 48px;
            height: 24px;
            display: flex;
            justify-content: center;
            align-items: center;
            line-height: 0;
          }
        }
      }
    }
    .subTitle {
      font-size: 16px;
      font-weight: 500;
      color: rgba(9, 34, 56, 1);
      margin: 10px 0;
      display: flex;
      justify-content: space-between;
      align-items: center;
      .chooseUploadType {
        display: flex;
        align-items: center;
        img {
          width: 16px;
          height: 16px;
          padding: 4px;
          margin-left: 5px;
          cursor: pointer;
        }
      }
    }
  }
  .operationBox {
    // background-color: aqua;
    height: 100%;
    padding: 16px;
    margin: 0 auto;
    .btn1 {
      display: inline-block;
      cursor: pointer;
      text-align: center;
      line-height: 40px;
      outline: none;
      width: 122px;
      height: 40px;
      color: #ed6d00;
      border: none;
      border-radius: 4px;
      background: #ffffff;
      border: 1px solid rgba(237, 109, 0, 1);
      margin-right: 30px;
    }
    .btn2 {
      display: inline-block;
      outline: none;
      cursor: pointer;
      text-align: center;
      line-height: 40px;
      width: 122px;
      height: 40px;
      border: none;
      color: #ffffff;
      background: rgba(237, 109, 0, 1);
      border-radius: 4px;
    }
  }
  .test-1::-webkit-scrollbar {
    /*ÊªöÂä®Êù°Êï¥‰ΩìÊ†∑Âºè*/
    width: 10px; /*È´òÂÆΩÂàÜÂà´ÂØπÂ∫îÊ®™Á´ñÊªöÂä®Êù°ÁöÑÂ∞∫ÂØ∏*/
    height: 1px;
  }
  .test-1::-webkit-scrollbar-thumb {
    /*ÊªöÂä®Êù°ÈáåÈù¢Â∞èÊñπÂùó*/
    border-radius: 10px;
    box-shadow: inset 0 0 5px rgba(0, 0, 0, 0.1);
    background: #d8d8d8;
  }
  .test-1::-webkit-scrollbar-track {
    /*ÊªöÂä®Êù°ÈáåÈù¢ËΩ®ÈÅì*/
    box-shadow: inset 0 0 5px rgba(0, 0, 0, 0.1);
    border-radius: 10px;
    background: #f7f7f7;
  }
}
</style>
