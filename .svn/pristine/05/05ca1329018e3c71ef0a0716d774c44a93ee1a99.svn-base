<template>
  <div>
    <el-upload
      class="avatar-uploader"
      action="1"
      :disabled="disabled"
      :show-file-list="false"
      :http-request="upLoadImg"
      v-loading="loading"
      :before-upload="beforeAvatarUpload"
      v-if="single"
    >
      <img v-if="avatarFlag&&userInfo.avatar" :src="qiniuFix + userInfo.avatar" class="avatar" />
      <div v-else>
        <img v-if="data_imageUrl" :src="qiniuFix + data_imageUrl" class="avatar" />
        <i v-else class="el-icon-plus avatar-uploader-icon"></i>
      </div>
      
    </el-upload>
    <el-upload
      ref="mutiplyUpload"
      action="1"
      :disabled="disabled"
      list-type="picture-card"
      :on-preview="handlePictureCardPreview"
      :on-remove="handleRemove"
      :http-request="upLoadImg"
      :file-list="data_imageUrlList"
      multiple
      :limit="limit"
      v-loading="loading"
      :before-upload="beforeAvatarUpload"
      v-if="!single"
      :on-exceed="handleOverload"
    >
      <i class="el-icon-plus"></i>
    </el-upload>
    <el-dialog
      :visible.sync="dialogVisible"
      modal-append-to-body="false"
      append-to-body="true"
      v-if="!single"
    >
      <img width="100%" :src="dialogImageUrl" alt />
    </el-dialog>
  </div>
</template>

<script>
import {mapGetters} from "vuex"
import * as qiniu from 'qiniu-js'

export default {
  props: {
    avatarFlag:{
      type:Boolean,
      default:false
    },
    imageUrl: {
      type: String,
      default: ""
    },
    imageUrlList: {
      type: String,
      default: ""
    },
    single: {
      type: Boolean,
      default: true
    },
    limit: {
      type: Number,
      default: 9
    },
    word: {
      type: String,
      default: ""
    },
    refDom: {
      type: String,
      default: ""
    },
    disabled: {
      type: Boolean,
      default: false
    },
    clearFileList:{
      type:Boolean,
      default: false
    },
  },
  computed: {
    ...mapGetters([
      "userInfo",
    ])
  },
  watch: {
    //清空上传文件列表
    clearFileList(isEnd){
      if(isEnd){
        this.$refs.mutiplyUpload.clearFiles();
      }
    },
    imageUrl() {
      this.data_imageUrl = this.imageUrl;
    },
    imageUrlList(val) {
      console.log(val)
      val = val.trim();
      if (val) {
        this.data_imageUrlList = [];
        val.split(",").forEach(ele => {
          this.data_imageUrlList.push({
            name: ele,
            url: this.qiniuFix + ele
          });
        });
      } else {
        this.data_imageUrlList = [];
      }
    },
  },
  data() {
    return {
      data_imageUrl: "",
      data_imageUrlList: [],
      qiniuFix: this.$config.qiniuURL,
      loading: false,
      dialogImageUrl: "",
      dialogVisible: false
    };
  },
  methods: {
    //处理超过限制个数时的回调
    handleOverload(){
      this.$message({
        type: 'info',
        message: '最大上传图片数量为'+this.limit+'张'
      });  
    },
    getImageUrlList(val) {
      val = val.trim();
      if (val) {
        this.data_imageUrlList = [];
        val.split(",").forEach(ele => {
          this.data_imageUrlList.push({
            name: ele,
            url: this.qiniuFix + ele
          });
        });
      } else {
        this.data_imageUrlList = [];
      }
    },
    beforeAvatarUpload(file) {
      // console.log(file)

      const isJPG = file.type === "image/jpeg" || file.type === "image/png";
      const isLt50M = file.size / 1024 / 1024 < 5;

      if (!isJPG) {
        this.$message.error("上传图片只能是 JPG或者PNG 格式!");
      }
      if (!isLt50M) {
        this.$message.error("上传图片不能大于5M!");
      }
      return isJPG && isLt50M;
    },
    handleRemove(file, fileList) {
      const newArry = [];
      fileList.forEach(ele => {
        newArry.push(ele.url.split("/")[3]);
      });
      const newArryStr = newArry.join(",");
      this.$emit("reducePic", {
        word: this.word,
        imgs: newArryStr,
        refDom: this.refDom,
        fileList
      });
    },
    handlePictureCardPreview(file) {
      this.dialogImageUrl = file.url;
      this.dialogVisible = true;
    },
    getUploadToken(){
      return {}
    },
    upLoadImg(file) {
      const _this = this;
      _this.loading = true;
      console.log(file)
      this.getUploadToken()
      .then(res => {
        let observable = qiniu.upload(file.file, new Date().getTime(), res.data)
        observable.subscribe((next) => {
          console.log(next)
          // reject(`正在上传`)
        },(error) => {
          console.log(error)
          // reject(`上传失败`)
        }, (complete) => {
          _this.loading = false;
          if (_this.single) {
            _this.data_imageUrl = complete.key;
            _this.$emit("addSignPic", {
              img: complete.key,
              word: _this.word,
              refDom: _this.refDom
            });
          } else {
            _this.$emit("addMutiPic", {
              word: _this.word,
              img: complete.key,
              refDom: _this.refDom
            });
          }
        })
      })
      .catch(() => {
          _this.loading = false;
      })
    }
  },
  mounted() {
    this.$emit("getImgs");
    if (this.imageUrl) {
      this.data_imageUrl = this.imageUrl;
    }
    //多张图的时候
    this.getImageUrlList(this.imageUrlList)
  }
};
</script>

<style lang="scss">
.avatar-uploader .el-upload {
  border: 1px dashed #d9d9d9;
  border-radius: 6px;
  cursor: pointer;
  position: relative;
  overflow: hidden;
}
.avatar-uploader .el-upload:hover {
  border-color: #409eff;
}
.avatar-uploader-icon {
  font-size: 28px;
  color: #8c939d;
  width: 148px;
  height: 148px;
  line-height: 148px !important;
  text-align: center;
}
.avatar {
  width: 148px;
  height: 148px;
  display: block;
}
</style>

